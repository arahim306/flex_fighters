#ifndef ADC_DRIVERS_H
#define ADC_DRIVERS_H

#include "sam.h"
#define REG_ADC_CDR0 (*(__I uint32_t*)0x40038050)
#define REG_ADC_CDR1 (*(__I uint32_t*)0x40038054)
#define REG_ADC_CDR2 (*(__I uint32_t*)0x40038058)
#define REG_ADC_CDR3 (*(__I uint32_t*)0x4003805C)

void adc_init(void) {
	REG_ADC_EMR |= ADC_EMR_TAG;				// SETS TAG BIT TO APPEND CHANNEL NUMBER TO CONVERSION
	REG_ADC_ACR |= ADC_ACR_IBCTL(1);		// SET ADC CLK TO 1 MHz
	REG_ADC_MR |= ADC_MR_PRESCAL(9);		//SET PRESCALAR FOR CORRECT CLK
}

void adc0_init(void) {
	//REG_ADC_CGR |= ADC_CGR_GAIN0(1);		// SET INTERNAL GAIN TO 1
	REG_ADC_CHER |= ADC_CHER_CH0;			// ENABLE ADC CHANNEL 0
	REG_ADC_IER |= ADC_IER_EOC0;			// ENABLE CHANNEL 0 INTERRUPTS
}

void adc1_init(void) {
	//REG_ADC_CGR |= ADC_CGR_GAIN0(1);		// SET INTERNAL GAIN TO 1
	REG_ADC_CHER |= ADC_CHER_CH1;			// ENABLE ADC CHANNEL 1
	REG_ADC_IER |= ADC_IER_EOC1;			// ENABLE CHANNEL 1 INTERRUPTS
}

void adc2_init(void) {
	//REG_ADC_CGR |= ADC_CGR_GAIN0(1);		// SET INTERNAL GAIN TO 1
	REG_ADC_CHER |= ADC_CHER_CH2;			// ENABLE ADC CHANNEL 2
	REG_ADC_IER |= ADC_IER_EOC2;			// ENABLE CHANNEL 2 INTERRUPTS
}

void adc3_init(void) {
	//REG_ADC_CGR |= ADC_CGR_GAIN0(1);		// SET INTERNAL GAIN TO 1
	REG_ADC_CHER |= ADC_CHER_CH3;			// ENABLE ADC CHANNEL 3
	REG_ADC_IER |= ADC_IER_EOC3;			// ENABLE CHANNEL 3 INTERRUPTS
}

void adc_interrupt_enable(void){
	NVIC_EnableIRQ(ADC_IRQn);			// ENABLE ADC INTERRUPTS
}

void adc_clk_en(void){
	REG_PMC_PCER0 |= PMC_PCER0_PID29;	// ENABLE CLOCK FOR ADC
}

void start_adc_conversion(void){
	REG_ADC_CR |= ADC_CR_START;			// START A CONVERSION
}


#endif